# This play will run Terraform via the Terraform module
# and build a dynamic inventory from its output
- name: Run Terraform and build inventory dynamically
  hosts: localhost
  roles:
  - terraform

# Next, we build a local SSH configuration. This is not necessarily needed, but
# makes it easy to SSH into the machines using their logical name
- name: Build SSH configuration
  hosts: localhost
  vars:
    ansible_ssh_private_key_file: "~/.ssh/gcp-default-key"
  roles:
  - sshConfig

 
# This play is only there to make sure that all machines are available before
# we proceed
- name: Wait for all machines to become ready
  hosts: all
  gather_facts: no
  tasks:
  - name: Wait for machine to become reachable
    wait_for_connection:
      delay: 10
      sleep: 10


#
# Create credentials
#
- name: Create credentials
  hosts: localhost
  vars_files:
    - global_vars.yaml
  roles:
    - prepareCredentials


#
# Now import the credentials just created. We cannot
# include this in vars_files as the file is not yet
# present when we run the playbook.
#
- name: Import credentials
  hosts: all
  gather_facts: no
  vars_files:
    global_vars.yaml
  tasks:
    - name: Read credentials
      include_vars:
        file: "{{credentials_dir}}/credentials.yaml"


# Set up APT cache on controller node
- name: Install APT cache on controller
  hosts: controller_nodes
  become: yes
  tasks: 
  - name: Install apt-cacher-ng 
    apt:
      name: apt-cacher-ng
      force_apt_get: yes 
      update_cache: yes
      state: latest

#
# Perform basic setup steps on all nodes. This will
# - distribute credentials
# - set up networking
# - make sure that the APT proxy is used
# - register the Cloud APT repository
# - install the python3 openstack client
# We first do this on the controller, as we do NOT want to enable APT caching
# on the controller itself, then on the other machines
#
- name: Basic node setup (controller)
  hosts: controller_nodes
  become: yes
  vars:
    # Do not use the proxy on the controller itself
    use_apt_proxy: False
    apt_proxy_url:  http://{{hostvars.controller.mgmt_ip}}:3142
  vars_files:
    - global_vars.yaml
  roles:
    - nodeSetup

- name: Basic node setup (other nodes)
  hosts: compute_nodes, network_nodes
  become: yes
  vars:
    # Use the APT proxy running on the controller
    use_apt_proxy: True
    apt_proxy_url:  http://{{hostvars.controller.mgmt_ip}}:3142
  vars_files:
    - global_vars.yaml
  roles:
    - nodeSetup


- name: Bring up OVS bridge br-ext on all nodes except the controller
  hosts: compute_nodes, network_nodes
  become: yes
  vars_files:
    global_vars.yaml
  tasks:
    - name: Create OVS bridge br-ext
      openvswitch_bridge:
        bridge: "{{phys_interface}}"
        fail_mode: secure
        state: present
    - name: Create patch port
      openvswitch_port:
        bridge: "{{phys_interface}}"
        port: "patch-{{phys_bridge_name}}"
        set: "interface patch-{{phys_bridge_name}} type=patch options:peer=patch-{{phys_interface}}"


- name: Connect br-ext on all compute nodes to br-ext on the network node via VXLAN VID 100
  hosts: compute_nodes
  become: yes
  vars_files:
    global_vars.yaml
  tasks:
    - name: Create VXLAN interface
      openvswitch_port:
        bridge: "{{phys_interface}}"
        port: "vxlan-network"
        set: "interface vxlan-network type=vxlan options:remote_ip={{hostvars.network.underlay_ip}} options:key=100"
    - name: Add NORMAL flow to br-ext
      command: 
        ovs-ofctl add-flow {{phys_interface}} priority=0,actions=NORMAL



- name: On the network node, add VXLAN ports to br-ext for all compute nodes 
  hosts: network_nodes
  become: yes
  vars_files:
    global_vars.yaml
  tasks: 
    - name: Create VXLAN interface for each compute node 
      openvswitch_port:
        bridge: "{{phys_interface}}"
        port: "vxlan-{{item}}"
        set: "interface vxlan-{{item}} type=vxlan options:remote_ip={{hostvars[item].underlay_ip}} options:key=100"
      loop:
        "{{ groups.compute_nodes}}"
     


- name: Bring up and wire up OVS bridge br-phys on all nodes except the controller
  hosts: network_nodes, compute_nodes
  become: yes
  vars_files:
    global_vars.yaml
  tasks:
    - name: Create OVS bridge br-phys
      openvswitch_bridge:
        bridge: "{{phys_bridge_name}}"
        fail_mode: secure
        state: present
    - name: Attach br-ext
      openvswitch_port:
        bridge: "{{phys_bridge_name}}"
        port: "patch-{{phys_interface}}"
        set: "interface patch-{{phys_interface}} type=patch options:peer=patch-{{phys_bridge_name}}"




- name: Establish routing on network node to provide external connectivity for instances 
  hosts: network_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    public_interface: ens4
    br_ext_ip_address: "172.16.0.1/24"
    br_ext_mtu: 1410
  roles:
    - router


#
# Set up the controller node as NTP server
#
- name: Install NTP on controller node
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    ntp_network_cidr: "{{management_network_cidr}}"
  roles:
    - ntpServer

#
# Set up the compute nodes as NTP clients
#
- name: Install NTP client on compute nodes
  hosts: compute_nodes
  become: yes
  vars_files:
    global_vars.yaml
  roles:
    - ntpClient


#
# Install MariaDB, Memcached and RabbitMQ on the controller
#
- name: Install middleware on controller node
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    mariadb_server_ip: "{{hostvars[db_node].mgmt_ip}}"
    mariadb_root_password: "{{MARIADB_ROOT_PASSWORD}}"
    rabbit_user_name: "openstack"
    rabbit_user_password: "{{OS_SERVICE_PASSWORD}}"
    memcached_server_ip: "{{hostvars[memcached_node].mgmt_ip}}"
  roles:
    - mariaDB
    - rabbitMQ
    - memcached


#
# Install Keystone on the controller node
#
- name: Install Keystone on controller node
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    keystone_db_user_password: "{{OS_SERVICE_PASSWORD}}"
  roles:
    - keystone


#
# Install Glance on the controller node
#
- name: Install Glance on controller node
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    glance_db_user_password: "{{OS_SERVICE_PASSWORD}}"
    keystone_admin_password: "{{OS_ADMIN_PASSWORD}}"
    glance_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
  roles:
    - glance

#
# Install Placement on the controller node
#
- name: Install Placement on controller node
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    keystone_admin_password: "{{OS_ADMIN_PASSWORD}}"
    placement_db_user_password: "{{OS_SERVICE_PASSWORD}}"
    placement_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
  roles:
    - placement


#
# Install Nova on the controller node
#
- name: Install Nova on controller node
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    neutron_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    rabbitmq_password: "{{OS_SERVICE_PASSWORD}}"
    keystone_admin_password: "{{OS_ADMIN_PASSWORD}}"
    nova_db_user_password: "{{OS_SERVICE_PASSWORD}}"
    nova_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    placement_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    metadata_shared_secret: "{{OS_SHARED_SECRET}}"
  roles:
    - nova


#
# Install Nova on the compute nodes
#
- name: Install Nova on compute nodes
  hosts: compute_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    neutron_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    rabbitmq_password: "{{OS_SERVICE_PASSWORD}}"
    keystone_admin_password: "{{OS_ADMIN_PASSWORD}}"
    nova_db_user_password: "{{OS_SERVICE_PASSWORD}}"
    nova_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    placement_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
  roles:
    - nova_compute


- name: Discover compute hosts
  hosts: controller_nodes
  become: yes
  become_user: nova
  tasks:
    - name: Discover compute hosts
      shell:
        nova-manage cell_v2 discover_hosts


- name: Install Neutron on controller nodes
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    neutron_db_user_password: "{{OS_SERVICE_PASSWORD}}"
    neutron_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    nova_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    keystone_admin_password: "{{OS_ADMIN_PASSWORD}}"
    rabbitmq_password: "{{OS_SERVICE_PASSWORD}}"
  roles:
    - neutron_server

- name: Install Neutron agents on network node
  hosts: network_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    metadata_shared_secret: "{{OS_SHARED_SECRET}}"
    rabbitmq_password: "{{OS_SERVICE_PASSWORD}}"
    neutron_db_user_password: "{{OS_SERVICE_PASSWORD}}"
    neutron_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
    nova_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"    
  roles:
    - neutron_agents

- name: Install L3 agent 
  hosts: network_nodes
  become: yes
  vars_files:
    global_vars.yaml
  roles:
    - neutron_l3agent


- name: Finalize Neutron configuration on compute nodes
  hosts: compute_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    keystone_admin_password: "{{OS_ADMIN_PASSWORD}}"
    rabbitmq_password: "{{OS_SERVICE_PASSWORD}}"
    neutron_keystone_user_password: "{{OS_SERVICE_PASSWORD}}"
  roles:
    - neutron_compute

- name: Install Horizon
  hosts: controller_nodes
  become: yes
  vars_files:
    global_vars.yaml
  vars:
    horizon_physical_networks: "['physnet']"
    horizon_supported_network_types: "['flat', 'vxlan']"
    horizon_enable_router: True
  roles:
    - horizon
